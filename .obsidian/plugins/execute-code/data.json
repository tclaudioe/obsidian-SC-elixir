{
  "lastOpenLanguageTab": "python",
  "timeout": 5000,
  "allowInput": true,
  "wslMode": false,
  "nodePath": "node",
  "nodeArgs": "",
  "jsInject": "",
  "tsPath": "ts-node",
  "tsArgs": "",
  "tsInject": "",
  "leanPath": "lean",
  "leanArgs": "",
  "leanInject": "",
  "luaPath": "lua",
  "luaArgs": "",
  "luaInject": "",
  "dartPath": "dart",
  "dartArgs": "",
  "dartInject": "",
  "csPath": "dotnet-script",
  "csArgs": "",
  "csInject": "",
  "pythonPath": "/Users/claudio/miniconda3/bin/python3",
  "pythonArgs": "",
  "pythonEmbedPlots": true,
  "pythonInject": "import numpy as np\nimport matplotlib.pyplot as plt\nimport bitstring as bs\nfrom scipy.interpolate import BarycentricInterpolator\n\n##############################################\n##############################################\n##############################################\n\n# This function shows the bits used for the sign, exponent and mantissa for a 64-bit double presision number.\n# fps: Floating Point Standard\n# Double: Double precision IEEE 754\ndef to_fps_double(f):\n    b = bs.pack('>d', f)\n    b = b.bin\n    #show sign + exponent + mantisa\n    print(b[0]+' '+b[1:12]+ ' '+b[12:])\n\n##############################################\n##############################################\n##############################################\n\ndef bisect(f, a, b, tol=1e-5, maxNumberIterations=100, usePandas=False):\n    # Evaluating the extreme points of the interval provided\n    fa = f(a)\n    fb = f(b)\n    # Iteration counter.\n    i = 0\n    # Just checking if the sign is not negative => not root  necessarily \n    if np.sign(f(a)*f(b)) >= 0:\n        print('f(a)f(b)<0 not satisfied!')\n        return None\n  \n    # Output table to store the numerical evolution of the algorithm\n    output_table = []\n    if not usePandas:\n        #Printing the evolution of the computation of the root\n        print(' i |    a    |    c    |    b    |   fa  |   fc   |   fb   | b-a')\n        print('------------------------------------------------------------------')\n    \n    # Main loop: it will iterate until it satisfies one of the two criterias:\n    # The tolerance 'tol' is achived or the max number of iterations is reached.\n    while ((b-a)/2 > tol) and i<=maxNumberIterations:\n        # Obtaining the midpoint of the interval. Quick question: What could happen if a different point is used?\n        c = (a+b)/2.\n        # Evaluating the mid point\n        fc = f(c)\n        # Saving the output data\n        output_table.append([i, a, c, b, fa, fc, fb, b-a])\n        if not usePandas:\n            print('%2d | %.5f | %.5f | %.5f | %.3f | %.3f | %.3f | %.3f' % (i+1, a, c, b, fa, fc, fb, b-a))\n\n        # Did we find the root?\n        if fc == 0:\n            print('f(c)==0')\n            break\n        elif np.sign(fa*fc) < 0:\n            # This first case consider that the new inetrval is defined by [a,c]\n            b = c\n            fb = fc\n        else:\n            # This second case consider that the new interval is defined by [c,b]\n            a = c\n            fa = fc\n        # Increasing the iteration counter\n        i += 1\n    \n    if usePandas:\n        # Showing final output table\n        columns    = ['$i$', '$a_i$', '$c_i$', '$b_i$', '$f(a_i)$', '$f(c_i)$', '$f(b_i)$', '$b_i-a_i$']\n        df = pd.DataFrame(data=output_table, columns=columns)\n        display(df)\n    \n    # Computing the best approximation obtaind for the root, which is the midpoint of the final interval.\n    xc = (a+b)/2.\n    return xc\n\n##############################################\n##############################################\n##############################################\n\ndef fpi_reduced(g, x0, k=10):\n    x = np.zeros(k+1)\n    x[0] = x0\n    for i in range(k):\n        x[i+1] = g(x[i])\n    return x\n\ndef cobweb2(x,g=None):\n    min_x = np.amin(x)\n    max_x = np.amax(x)\n    \n    f = plt.figure()\n    ax = plt.axes()\n    plt.plot(np.array([min_x,max_x]),np.array([min_x,max_x]),'b-')\n    for i in np.arange(x.size-1):\n        delta_x = x[i+1]-x[i]\n        head_length =  np.abs(delta_x)*0.04\n        arrow_length = delta_x-np.sign(delta_x)*head_length\n        ax.arrow(x[i], x[i], 0, arrow_length, head_width=1.5*head_length, head_length=head_length, fc='k', ec='k')\n        ax.arrow(x[i], x[i+1], arrow_length, 0, head_width=1.5*head_length, head_length=head_length, fc='k', ec='k')\n    \n    if g!=None:\n        y = np.linspace(min_x,max_x,1000)\n        plt.plot(y,g(y),'r')\n    \n    plt.title('Cobweb diagram')\n    plt.grid(True)\n    #plt.show()\n    return f\n\n##############################################\n##############################################\n##############################################\n\n",
  "shellPath": "bash",
  "shellArgs": "",
  "shellFileExtension": "sh",
  "shellInject": "",
  "batchPath": "call",
  "batchArgs": "",
  "batchFileExtension": "bat",
  "batchInject": "",
  "groovyPath": "groovy",
  "groovyArgs": "",
  "groovyFileExtension": "groovy",
  "groovyInject": "",
  "golangPath": "go",
  "golangArgs": "run",
  "golangFileExtension": "go",
  "goInject": "",
  "javaPath": "java",
  "javaArgs": "-ea",
  "javaFileExtension": "java",
  "javaInject": "",
  "maxPrologAnswers": 15,
  "prologInject": "",
  "powershellPath": "powershell",
  "powershellArgs": "-file",
  "powershellFileExtension": "ps1",
  "powershellInject": "$OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding",
  "powershellEncoding": "latin1",
  "cargoPath": "cargo",
  "cargoEvalArgs": "",
  "rustInject": "",
  "cppRunner": "cling",
  "cppInject": "",
  "cppArgs": "",
  "cppUseMain": false,
  "clingPath": "cling",
  "clingArgs": "",
  "clingStd": "c++17",
  "rustFileExtension": "rs",
  "RPath": "Rscript",
  "RArgs": "",
  "REmbedPlots": true,
  "rInject": "",
  "kotlinPath": "kotlinc",
  "kotlinArgs": "-script",
  "kotlinFileExtension": "kts",
  "kotlinInject": "",
  "runghcPath": "runghc",
  "ghcPath": "ghc",
  "ghciPath": "ghci",
  "useGhci": false,
  "haskellInject": "",
  "mathematicaPath": "wolframscript",
  "mathematicaArgs": "-file",
  "mathematicaFileExtension": "wls",
  "mathematicaInject": "",
  "scalaPath": "scala",
  "scalaArgs": "",
  "scalaFileExtension": "scala",
  "scalaInject": "",
  "racketPath": "racket",
  "racketArgs": "",
  "racketFileExtension": "rkt",
  "racketInject": "#lang racket",
  "fsharpPath": "dotnet",
  "fsharpArgs": "",
  "fsharpInject": "",
  "fsharpFileExtension": "fsx",
  "cArgs": "",
  "cUseMain": true,
  "cInject": "",
  "rubyPath": "ruby",
  "rubyArgs": "",
  "rubyInject": "",
  "sqlPath": "psql",
  "sqlArgs": "-d <database> -U <user> -f",
  "sqlInject": "",
  "octavePath": "octave",
  "octaveArgs": "-q",
  "octaveFileExtension": "m",
  "octaveInject": "figure('visible','off')  # Necessary to embed plots",
  "maximaPath": "maxima",
  "maximaArgs": "-qb",
  "maximaFileExtension": "mx",
  "maximaInject": "",
  "jsInteractive": true,
  "tsInteractive": false,
  "csInteractive": false,
  "leanInteractive": false,
  "luaInteractive": false,
  "dartInteractive": false,
  "pythonInteractive": true,
  "cppInteractive": false,
  "prologInteractive": false,
  "shellInteractive": false,
  "batchInteractive": false,
  "bashInteractive": false,
  "groovyInteractive": false,
  "rInteractive": false,
  "goInteractive": false,
  "rustInteractive": false,
  "javaInteractive": false,
  "powershellInteractive": false,
  "kotlinInteractive": false,
  "mathematicaInteractive": false,
  "haskellInteractive": false,
  "scalaInteractive": false,
  "fsharpInteractive": false,
  "cInteractive": false,
  "racketInteractive": false,
  "rubyInteractive": false,
  "sqlInteractive": false,
  "octaveInteractive": false,
  "maximaInteractive": false
}